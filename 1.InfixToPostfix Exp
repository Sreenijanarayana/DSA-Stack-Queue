class Solution {
    public static String infixToPostfix(String s) {
        // code here
        StringBuilder sb = new StringBuilder();
        Stack<Character> st = new Stack<>();
        for(char ch:s.toCharArray()){
            if(ch=='(')
            st.push(ch);
            else if(ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='^' ){
               int op = operatorPrecedence(ch);
               if(st.isEmpty() || operatorPrecedence(st.peek())<op){
                   st.push(ch);
               }
               else{
                   while(!st.isEmpty() && operatorPrecedence(st.peek())>=op){
                      sb.append(st.pop());
                   }
                   st.push(ch);
               }
            }
            else if(ch==')'){
                while(!st.isEmpty()&&st.peek()!='('){
                sb.append(st.pop());
                }
                st.pop();
            }
            else{
                sb.append(ch);
            }
        }
        
        while(!st.isEmpty()){
            sb.append(st.pop());
        }
         return sb.toString();
    }
    
    public static int operatorPrecedence(char ch){
        if(ch=='+'||ch=='-')
        return 1;
        else if(ch=='*'||ch=='/')
        return 2;
        else if(ch=='^')
        return 3;
        else
        return -1;
    }
}

------------------------------------------------------------------------------------------------------


public class InfixToPostfix {
    static int prec(char c) {
        if (c == '^') return 3;
        else if (c == '/' || c == '*') return 2;
        else if (c == '+' || c == '-') return 1;
        else return -1;
    }

    static String infixToPostfix(String s) {
        Stack<Character> st = new Stack<>();
        StringBuilder res = new StringBuilder();

        for (char c : s.toCharArray()) {
            
            // If the scanned character is an operand, 
            // add it to the output string.
            if (Character.isLetterOrDigit(c)) {
                res.append(c);
            } 
            
            // If the scanned character is an ‘(‘, 
            // push it to the stack.
            else if (c == '(') {
                st.push(c);
            } 
            
            // If the scanned character is an ‘)’,
            // pop and add to the output string from the stack
            // until an ‘(‘ is encountered.
            else if (c == ')') {
                while (!st.isEmpty() && st.peek() != '(') {
                    res.append(st.pop());
                }
                st.pop();
            } 
            
            // If an operator is scanned
            else {
                while (!st.isEmpty() && prec(c) <= prec(st.peek())) {
                    res.append(st.pop());
                }
                st.push(c);
            }
        }

        // Pop all the remaining elements from the stack
        while (!st.isEmpty()) {
            res.append(st.pop());
        }

        return res.toString();
    }

  
